name: Start release
run-name: "Start release of Kestra ${{ github.event.inputs.releaseVersion }} ðŸš€"
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'The release version (e.g., 0.21.1)'
        required: true
        type: string

permissions:
  contents: write

env:
  RELEASE_VERSION: "${{ github.event.inputs.releaseVersion }}"
jobs:
  release:
    name: Release Kestra
    runs-on: ubuntu-latest
    steps:
      - name: Parse and Check Inputs
        id: parse-and-check-inputs
        run: |
          CURRENT_BRANCH="${{ github.ref_name }}"
          if ! [[ "$CURRENT_BRANCH" == "develop" ]]; then
            echo "You can only run this workflow on develop, but you ran it on $CURRENT_BRANCH"
            exit 1
          fi

          if ! [[ "$RELEASE_VERSION" =~ ^[0-9]+(\.[0-9]+)(\.[0-9]+)(-rc[0-9])?(-SNAPSHOT)?$ ]]; then
            echo "Invalid release version. Must match regex: ^[0-9]+(\.[0-9]+)(\.[0-9]+)-(rc[0-9])?(-SNAPSHOT)?$"
            exit 1
          fi

          # Extract the major and minor versions
          BASE_VERSION=$(echo "$RELEASE_VERSION" | sed -E 's/^([0-9]+\.[0-9]+)\..*/\1/')
          RELEASE_BRANCH="releases/v${BASE_VERSION}.x"
          echo "release_branch=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT

      # Checkout
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PERSONAL_TOKEN }}
          ref: ${{ steps.parse-and-check-inputs.outputs.release_branch }}

      # Configure
      - name: Git - Configure
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # Execute
      - name: Start release by updating version and pushing a new tag
        env:
          GITHUB_PAT: ${{ secrets.GH_PERSONAL_TOKEN }}
        run: |
          # Update version
          sed -i "s/^version=.*/version=$RELEASE_VERSION/" ./gradle.properties
          git add ./gradle.properties
          git commit -m"chore(version): update to version '$RELEASE_VERSION'"
          git push
          git tag -a "v$RELEASE_VERSION" -m"v$RELEASE_VERSION"
          git push --tags
